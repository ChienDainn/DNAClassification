# -*- coding: utf-8 -*-
"""DNA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SIc_2mKTsYpqGbEZEhHi1N8_e1iRozdj
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import Image
# %matplotlib inline
import seaborn as sns
from matplotlib import cm

import warnings
warnings.filterwarnings('ignore')

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score,f1_score,recall_score,precision_score,confusion_matrix,classification_report,roc_curve,roc_auc_score

"""# 2. Exploratory Data Analysis"""

labels = ['G protein coupled receptors','Tyrosine Kinase','Tyrosine phosphatase','Synthetase','Synthase','Ion channel','Transcription Factor']

human_data = pd.read_table('human_data.txt')
human_data.head()

human_data.info()

human_data.describe()

sns.barplot(x=human_data["class"].value_counts().sort_index(),y=labels) #plotting the barplot using seaborn
plt.title("Class frequency for human data")
plt.xlabel('Frequency')
plt.ylabel('Protein class')
plt.show()

plt.figure(figsize=(6,6))
font_dict=font = {'family': 'serif',
        'color':  'Black',
        'weight': 'normal',
        'size': 20,
        }
a=np.random.random(7)
cs=cm.Set1(np.arange(7)/7.)
plt.pie(human_data["class"].value_counts().sort_index(),labels=labels,autopct='%1.1f%%',colors=cs,startangle=90)
plt.axis('equal')
plt.title("Human data Protein class",fontdict=font_dict)
plt.show() #displaying the plot

chimp_data = pd.read_table('chimp_data.txt')
chimp_data.head()

chimp_data.describe()

sns.barplot(x=chimp_data["class"].value_counts().sort_index(),y=labels)
plt.title("Class frequency for Chimp data")
plt.xlabel('Frequency')
plt.ylabel('Protein class')
plt.show()

plt.figure(figsize=(6,6))
font_dict=font = {'family': 'serif',
        'color':  'Black',
        'weight': 'normal',
        'size': 20,
        }
a=np.random.random(7)
cs=cm.Set1(np.arange(7)/7.)
plt.pie(chimp_data["class"].value_counts().sort_index(),labels=labels,autopct='%1.1f%%',colors=cs,startangle=90)
plt.axis('equal')
plt.title("Chimp data Protein class",fontdict=font_dict)
plt.show()

"""# 3. Model Development

# (a)- Human Data
"""

def getKmers(sequence, size=6):
    return [sequence[x:x+size].lower() for x in range(len(sequence) - size + 1)]


cv = CountVectorizer(ngram_range=(4,4))

human_data['words'] = human_data.apply(lambda x: getKmers(x['sequence']), axis=1)
human_data = human_data.drop('sequence', axis=1)

human_texts = list(human_data["words"])
for item in range (len(human_data)):
    human_texts[item]=" ".join(human_texts[item])

X_human = cv.fit_transform(human_texts)
y_human = human_data.iloc[:, 0].values

print(X_human.shape,y_human.shape)

(human_texts[1])

from sklearn.model_selection import train_test_split
X_train_human, X_test_human, y_train_human, y_test_human = train_test_split(X_human,y_human,test_size = 0.25,random_state=42)
#splitting the data into train and split by ratio of 75% train and 25% test

from sklearn.tree import DecisionTreeClassifier #importing the decisiontreeclassifier algorithm from sklearn
dtree_human = DecisionTreeClassifier()
dtree_human.fit(X_train_human,y_train_human)
dtree_human_pred = dtree_human.predict(X_test_human)
print("Accuracy for human data using  DecisionTree Classifier : ",accuracy_score(dtree_human_pred,y_test_human))

from sklearn.ensemble import RandomForestClassifier #importing the RandomForestclassifier algorithm from sklearn
rf_human = RandomForestClassifier(n_estimators=400)
rf_human.fit(X_train_human,y_train_human)
rf_human_pred = rf_human.predict(X_test_human)
print("Accuracy for human data using RandomForest Classifier : ",accuracy_score(rf_human_pred,y_test_human))

import xgboost as xgb #importing xgboost algorithm
xgb_human = xgb.XGBClassifier()
xgb_human.fit(X_train_human,y_train_human)
xgb_human_pred = xgb_human.predict(X_test_human)
print("Accuracy for human data using XGBoost Classifier : ",accuracy_score(xgb_human_pred,y_test_human))

from sklearn.naive_bayes import MultinomialNB #importing the decisiontreeclassifier algorithm from sklearn
NB_human = MultinomialNB(alpha=0.1)
NB_human.fit(X_train_human,y_train_human)
y_pred_human = NB_human.predict(X_test_human)
nb_accuracy_human = accuracy_score(y_pred_human,y_test_human)
print("Accuracy for human data using Naive Bayes Classifier : " ,nb_accuracy_human)

cm =confusion_matrix(y_pred_human,y_test_human)#plotting the confusion matrix
sns.heatmap(cm, annot=True, xticklabels=labels, yticklabels=labels, fmt='g')

print(classification_report(y_pred_human,y_test_human))
#printing out the classification report which gives us
# the f1 score , recall , precision and support

"""# (b)- Chimpanzee Data"""

chimp_data['words'] = chimp_data.apply(lambda x: getKmers(x['sequence']), axis=1) #applying getKmers
chimp_data = chimp_data.drop('sequence', axis=1)

chimp_texts = list(chimp_data['words']) #creating a list of words column in chimp_data
for item in range(len(chimp_texts)):
    chimp_texts[item] = ' '.join(chimp_texts[item])

(chimp_texts[1])

X_chimp = cv.transform(chimp_texts)
y_chimp = chimp_data.iloc[:, 0].values

print(X_chimp.shape,y_chimp.shape)

from sklearn.model_selection import train_test_split
X_train_chimp, X_test_chimp, y_train_chimp, y_test_chimp = train_test_split(X_chimp,y_chimp,test_size = 0.25,random_state=42)
#splitting the data into train and split by ratio of 75% train and 25% test

from sklearn.tree import DecisionTreeClassifier
dtree_chimp = DecisionTreeClassifier()
dtree_chimp.fit(X_train_chimp,y_train_chimp)
dtree_chimp_pred = dtree_chimp.predict(X_test_chimp)
print("Accuracy for Chimp data using  DecisionTree Classifier : ",accuracy_score(dtree_chimp_pred,y_test_chimp))

from sklearn.ensemble import RandomForestClassifier
rf_chimp = RandomForestClassifier(n_estimators=400)
rf_chimp.fit(X_train_chimp,y_train_chimp)
rf_chimp_pred = rf_chimp.predict(X_test_chimp)
print("Accuracy for Chimp data using Random Forest Classifier : ",accuracy_score(rf_chimp_pred,y_test_chimp))

import xgboost as xgb
xgb_chimp = xgb.XGBClassifier()
xgb_chimp.fit(X_train_chimp,y_train_chimp)
xgb_chimp_pred = xgb_chimp.predict(X_test_chimp)
print("Accuracy for Chimp data using XGBoost Classifier : ",accuracy_score(xgb_chimp_pred,y_test_chimp))

NB_chimp = MultinomialNB(alpha=0.1)
NB_chimp.fit(X_train_chimp,y_train_chimp)
y_pred_chimp = NB_chimp.predict(X_test_chimp)
nb_accuracy_chimp = accuracy_score(y_pred_chimp,y_test_chimp)
print("Accuracy for Chimp data using Naive Bayes Classifier : " ,nb_accuracy_chimp)

cm =confusion_matrix(y_pred_chimp,y_test_chimp)
sns.heatmap(cm, annot=True, xticklabels=labels, yticklabels=labels, fmt= "g")

print(classification_report(y_pred_chimp,y_test_chimp))
#printing out the classification report which gives us  the f1 score , recall , precision and support